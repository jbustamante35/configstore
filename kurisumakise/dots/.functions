# vim: filetype=sh
#############
# FUNCTIONS #
#############

# create directory and move to it
mvcd () {
	mkdir $1;
	cd $1;
}

# move to directory and show contents
cl () {
	cd $1 && la -F;
}

# check current status of dropbox syncing
drchk () {
    cd $HOME/Dropbox;
    dropbox-cli filestatus && printf "\n" && dropbox-cli status;
    printf "\n";
    cd -;
    dropbox-cli filestatus ;
}

# Reload color schemes
clrs () {
    xrdb -load ~/.cache/wal/colors.Xresources;
    xrdb -merge ~/.Xresources;
}

# compile and run kotlin program
kotlinr () {
    echo Compiling, please wait...
	kotlinc $1 -include-runtime -d out.jar
	java -jar out.jar
}

# Reset pywal source colors and choose backend
wali () {
    bak="$1"
    sat="$2"

    wal -c ;
    clrs ;
    wal --backend "$bak" -i ~/.config/wall.jpg --saturate "$sat" -q ;
}

# Locate, Select, and Excecute [pipe locate and fzf into application]
lse () {
    # typ: search query for filtering by file or filetype
    # app: application to run selected file
    typ="$1"
    app="$2"
    ver="$3"

    case $ver in
        1)
            # Search through entire filesystem
            "$app" "$(locate "*$typ" | fzf)"
            ;;
        2)
            # Search through current directory tree
            "$app" "$(tree -Nif | egrep -i  "*$typ" | fzf)"
            ;;
        3)
            # Search file contents instead of files
            "$app" "$(ag -Qil "$typ" | fzf)"
            ;;
        *)
            # Default to version 1
            "$app" "$(locate "*$typ" | fzf)"
            ;;
    esac
}

# Select video player and video type from current directory [default mpv]
mvid () {
    vt="$1"
    pl="$2"

    case "$pl" in
        "")
            mpv "$(ls *"$vt" | dmenu -l 30)"
            #ls *"$vt" | dmenu -l 30 | xargs -I {} mpv "{}"
            ;;
        *)
            "$pl" "$(ls *"$vt" | dmenu -l 30)"
            #ls *"$vt" | dmenu -l 30 | xargs -I {} "$pl" "{}"
            ;;
    esac
}

# Start tmux session on remote host [doesn't work]
tsh () {
    host="$1"
    ssnname="$2"

    if [ -z "$ssnname" ]; then
        echo "Provide name of session [Example: tsh <host> main]"
        return 1;
    fi

    echo ssh "$host" -t "tmux -CC attach -t $ssnname || tmux -CC new $ssnname"
    ssh $host -t "tmux -CC attach -t $ssnname || tmux -CC new $ssnname"

}

# View VNC display
vpnj () {
    vpn="openconnect"
    killme="$1"
    megakill "$vpn" 1

    case "$killme" in
        k) ;;
        *)
            sudo "$vpn" --protocol=gp uwmadison.vpn.wisc.edu -u jbustamante -b
            ;;
    esac
}

# Convert color image to grayscale
cl2gr () {
    fin=$1
    fout=$2
    convert "$fin" -set colorspace Gray -separate -average "$fout"
}

# Clock CPU or Core temperatures
clock_cpu () {
    int="$2"
    case "$1" in
        speed)
            cmd='cat /proc/cpuinfo'
            regex="MHz"
            ;;

        temps)
            cmd="sensors"
            regex="Core "
            ;;

        fans)
            cmd="sensors"
            regex="fan"
            ;;

        *) ;;
    esac

    echo watch -n $int "$cmd | grep $regex |"
    watch -n $int "$cmd | grep $regex"
}

# Check hwmon or thermal devices
check_devices () {
    case "$1" in
        hwmon)
            din="/sys/class/hwmon/hwmon*"
            fin="name"
            ;;

        thermal)
            din="/sys/class/thermal/thermal_zone*"
            fin="type"
            ;;
        *)
            echo "Enter [hwmon|thermal]"
            din=""
            fin=""
            ;;
    esac

    for i in "$din"; do
        echo "$i: $(<$i/"$fin")";
    done
}
