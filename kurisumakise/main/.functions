# vim: filetype=sh
#############
# FUNCTIONS #
#############

# create directory and move to it
mvcd () {
	mkdir $1;
	cd $1;
}

# move to directory and show contents
cl () {
	cd $1 && la -F;
}

# check current status of dropbox syncing
drchk () {
    cd $HOME/Dropbox;
    dropbox-cli filestatus && printf "\n" && dropbox-cli status;
    printf "\n";
    cd -;
    dropbox-cli filestatus ;
}

# Restart Dropbox
drpstp () {
    dropbox-cli stop ;
    sleep 1 ;
    dropbox-cli start ;
}

# compile and run kotlin program
kotlinr () {
    echo Compiling, please wait...
	kotlinc $1 -include-runtime -d out.jar
	java -jar out.jar
}

# Select video player and video type from current directory [default mpv]
mvid () {
    vt="$1"
    pl="$2"

    case "$pl" in
        "")
            mpv "$(ls *"$vt" | dmenu -l 30)"
            #ls *"$vt" | dmenu -l 30 | xargs -I {} mpv "{}"
            ;;
        *)
            "$pl" "$(ls *"$vt" | dmenu -l 30)"
            #ls *"$vt" | dmenu -l 30 | xargs -I {} "$pl" "{}"
            ;;
    esac
}

# Start Openconnect VPN to UW Campus
vpnj () {
    vpn="openconnect"
    killme="$1"
    megakill "$vpn" 1

    case "$killme" in
        k)
            megakill ssh 1
            ;;
        *)
            sudo "$vpn" --protocol=gp uwmadison.vpn.wisc.edu -u jbustamante -b
            ;;
    esac
}

# Shortcut to convert image to compressed jpg
cnvv () {
    img="$1"
    pct="$2"
    ext="$(echo $img | cut -d'.' -f1)"

    convert -resize "$pct" "$img" "$fin".jpg
}

# Convert all images in directory
cnvall () {
    ext="$1"
    pct="$2"

    for i in *."$ext" ; do
        cnvv "$i" "$pct" ;
    done
}

# Convert color image to grayscale
cl2gr () {
    fin=$1
    fout=$2
    convert "$fin" -set colorspace Gray -separate -average "$fout"
}

# Clock CPU or Core temperatures
clock_cpu () {
    int="$2"
    case "$1" in
        speed)
            cmd='cat /proc/cpuinfo'
            regex="MHz"
            ;;

        temps)
            cmd="sensors"
            regex="Core "
            ;;

        fans)
            cmd="sensors"
            regex="fan"
            ;;

        *) ;;
    esac

    echo watch -n $int "$cmd | grep $regex |"
    watch -n $int "$cmd | grep $regex"
}

# Check hwmon or thermal devices
check_devices () {
    case "$1" in
        hwmon)
            din="/sys/class/hwmon/hwmon*"
            fin="name"
            ;;

        thermal)
            din="/sys/class/thermal/thermal_zone*"
            fin="type"
            ;;
        *)
            echo "Enter [hwmon|thermal]"
            din=""
            fin=""
            ;;
    esac

    for i in "$din"; do
        echo "$i: $(<$i/"$fin")";
    done
}

# Set up secondary monitor on BSPWM
bspwm_addsecondary () {
    bspc monitor eDP1 -d A1 A2 A3 A4 A5 ;
    bspc monitor "$1" -d B1 B2 B3 B4 B5 ;
    bspc wm -r ;
    polybar -c ~/.config/polybar/polybar.conf secondary -q --reload &
}

